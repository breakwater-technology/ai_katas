{
  "name": "[3][Solution] Product manager semi-manual SQL agent",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * \nfrom products\nwhere category like '%{{ $json.output.category }}%'\nand (lower(product_name) like lower('%{{ $json['output.product_names'] }}%') or lower(cluster_label) like lower('%{{ $json['output.product_names'] }}%'))",
        "options": {}
      },
      "id": "24ce3485-85e3-4d61-a266-ebc67ba3745e",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1880,
        460
      ],
      "credentials": {
        "postgres": {
          "id": "hHafngz9pnwrZuwo",
          "name": "ai_katas_pg_user"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b7ba622e-cb29-45ed-91a8-51baf976704d",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        640,
        760
      ],
      "webhookId": "fbd41133-a50b-4954-a83a-3f0509213e27",
      "disabled": true
    },
    {
      "parameters": {},
      "id": "f4898970-0563-4e67-9bf9-1d3be115c281",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        620,
        980
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.4
        }
      },
      "id": "a5f67539-6575-43c1-b2ae-09f4e454dbe2",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2340,
        1140
      ],
      "credentials": {
        "openAiApi": {
          "id": "FAM16ecPTkuh1pQV",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "2398ba65-4027-451b-bdc2-3009a61a2ec3",
      "name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        2680,
        1040
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.4
        }
      },
      "id": "3e7d07d2-3ebf-4272-9084-16e01ec0ff9f",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        980,
        980
      ],
      "credentials": {
        "openAiApi": {
          "id": "FAM16ecPTkuh1pQV",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"category\": \"California\",\n\t\"product_names\": [\"Los Angeles\", \"San Francisco\", \"San Diego\"]\n}"
      },
      "id": "d2af5f84-41ad-47dc-b40e-f7b0543144d0",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1260,
        880
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.product_names",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "33133a42-e2f4-4303-aafe-765c599fa27a",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1460,
        620
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "08108d56-7886-4815-a58a-d1108e67b600",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2380,
        400
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "4ada3425-79ea-45fa-a9c7-50d5acd2729e",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2580,
        340
      ]
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "product_id",
        "options": {}
      },
      "id": "1a287f8d-c449-4054-bf0e-be5e17c2c85c",
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        2320,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f15a2127-fc58-4cfd-ab04-af01100d26e1",
              "leftValue": "={{ $json.output.category }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "7a01d767-e7eb-473d-9671-59f5194ee92c",
              "leftValue": "={{ $json['output.product_names'] }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "0143ac0d-ab18-4998-a5a7-329159709fff",
      "name": "If porduct not specified",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1500,
        880
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Execute Workflow Trigger').item.json.query }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a **product category classifier and product name extractor**. Your task is to analyze the customer's question and perform the following actions:\n\n1. Identify the **category of the product**. The product category must be selected from the following list:\n   - Microwaves\n   - CPUs\n   - Freezers\n   - Washing Machines\n   - Mobile Phones\n   - Digital Cameras\n   - Fridges\n   - Dishwashers\n   - TVs\n   - Fridge Freezers\n\n2. Extract the **product names** mentioned in the customer's question. This can include:\n   - Specific product names or types mentioned by the customer (e.g., \"iPhone 12\" or \"Samsung 4K TV\").\n   - If only a general product type is mentioned (e.g., \"TV\" or \"freezer\"), use the product type as the product name.\n\n### Output:\n- Return the product **category** as **one word**, exactly as it appears in the list.\n- If you cannot determine a category from the question, return **nothing**.\n- Return a **list of product names**. If specific product names are mentioned, include them in the list. If a general product type is mentioned, include that type in the list. If you cannot identify any product names or category return 'not_found'.\n\n### Format:\n- `category: <category>` (replace `<category>` with the category name from the list)\n- `product_names: <name1>, <name2>`\n\n### Example Outputs:\n1. Customer asks: \"Recommend me a TV please, 4K.\"\n   - `category: TVs`\n   - `product_names: \"TV\"`\n2. Customer asks: \"What is the best iPhone 12?\"\n   - `category: Mobile Phones`\n   - `product_names: \"iPhone 12\"`\n3. Customer asks: \"Do you have any freezers on sale?\"\n   - `category: Freezers`\n   - `product_names: \"freezer\"`\n4. Customer asks: \"I see there are some Sony TVs in your catalog. Can you compare the features and prices between the Sony KD75XF8596BU and other TV models you have?\"\n   - `category: TVs`\n   - `product_names: \"Sony KD75XF8596BU\", \"TV\"`\n5. Customer asks: \"Looking at the ratings distribution across different product categories, which category would you recommend for the most reliable purchases based on customer satisfaction?\"\n   - `category: not_found`\n   - `product_names: \"not_found\"\n\n### SQL Context:\n- Each product name in `product_names` will be used iteratively in the following SQL condition: `product_name LIKE '%<name>%' OR cluster_label LIKE '%<name>%'`."
            }
          ]
        }
      },
      "id": "90621116-2479-4fff-85b7-b0637a0ab05e",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1040,
        660
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Execute Workflow Trigger').item.json.query }}",
        "options": {
          "systemMessage": "=As a **Product Consultant** at ShopWise Solutions, your primary task is to assist with customer inquiries about products using the following information from the database. Currency is Euro:\n\n{{ $json.concatenated_data }}"
        }
      },
      "id": "521c11ed-ccbf-46b2-bf61-ec9f0b0bd9e2",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        2720,
        560
      ]
    },
    {
      "parameters": {
        "agent": "sqlAgent",
        "promptType": "define",
        "text": "={{ $('Execute Workflow Trigger').item.json.query }}",
        "options": {
          "includedTables": "products",
          "prefixPrompt": "As a **Product Consultant** at ShopWise Solutions, your primary task is to assist with customer inquiries about products using the following information from the database. You are an agent designed to interact with an SQL database.\nGiven an input question, create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUnless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results using the LIMIT clause.\nYou can order the results by a relevant column to return the most interesting examples in the database.\nNever query for all the columns from a specific table, only ask for a the few relevant columns given the question.\nYou have access to tools for interacting with the database.\nOnly use the below tools. Only use the information returned by the below tools to construct your final answer.\nYou MUST double check your query before executing it. If you get an error while executing a query, rewrite the query and try again.\n\nDO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\n\nIf the question does not seem related to the database, just return \"I don't know\" as the answer.\nCurrency is Euro."
        }
      },
      "id": "bd8af2ac-6fc0-477b-9ca5-6c30cf9c4277",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1840,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "hHafngz9pnwrZuwo",
          "name": "ai_katas_pg_user"
        }
      }
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "query": "Compare features and prices of Sony KD75XF8596BU with other brands of TVs."
        }
      }
    ]
  },
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If porduct not specified",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If porduct not specified": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bb64b63f-527e-4ecd-a823-46dd2ba92ee0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3794c66ff650fb7ddc0b766ce1fcc1c2e8b38b2b748cd2d353664e9d9f2054a7"
  },
  "id": "mfJRfm6x8VUOktPu",
  "tags": [
    {
      "createdAt": "2024-11-14T14:59:17.372Z",
      "updatedAt": "2024-11-14T14:59:17.372Z",
      "id": "BCVWTDHbyeNngImV",
      "name": "prod"
    }
  ]
}